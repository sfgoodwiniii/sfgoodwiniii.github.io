Name: Stanley Goodwin
Date: 3/12/2022


Question 1)
    The pivot's purpose is to be a value in which a list can be split by (lower, higher, and same) in order to
    recursively call the function to get O(nlog(n)).

    For a non-sorted list, it does not matter the index chosen for the pivot to exist, due to the numbers being randomly
    distributed anyway, the value statistically should a close-to-middle value for pivoting around.

    Given a sorted list, however, choosing the 0th index vs the middle index would cause the quick select to take the
    longest path possible in returning a value back, vs the middle index which would be, in a way, a binary search.


Question 2)
    Given a sufficiently large list, making a list of Quick_Select(i) for i in range(len(data_lst)) should be exactly
    equal to the data_lst after being sorted. Note: Using lst[0] as pivot.

    It is also not possible to, within code itself, prove that it will work in every test case.
    However, we can conclude by large numbers that it must work using logical reasoning and algorithmic proof.
        If the algorithm is known to work and all permutations of a list work, it can be reasonably concluded that the
        function provides the correct values for different lists of values and sizes.

    Ex1: [5,8,3,1,7,3], 4th smallest number (index-wise)
    -> pivot = 5
    -> smaller_lst = [3,1,3]
    -> larger_lst  = [8,7]
    -> same = 1
    -> k(4) >= 3 and k(4) < 4: FALSE
    -> 3 > 4: FALSE
    -> ELSE: QS([8,7], k=4-3-1=0)
        -> pivot = 8
        -> smaller_lst = [7]
        -> larger_lst  = []
        -> same = 1
        -> k(0) >= 1 and k(0) < 2: FALSE
        -> k(0) >= 1: FALSE
        -> 1 > 0: QS([7], k = 0)
            -> pivot = 7
            -> smaller_lst = []
            -> larger_lst  = []
            -> same = 1
            -> k(0) >= 0 and k(0) < 1: RETURN PIVOT = 7

    -> QS([5,8,3,1,7,3], k = 4) => 7


Question 3)
    Here's a given table of the values I got from running the functions with the datasets.
    The spreadsheet below is based on N (length of the list) and the times it took for both algorithms.

    │    N    │  insertion_sort  │   quick_select   │
    ├─────────┼──────────────────┼──────────────────┤
    │      4  │   8.70001e-06s   │   8.99998e-06s   │
    │      5  │   7.80000e-06s   │   6.20002e-06s   │
    │      5  │   9.69999e-06s   │   1.79000e-05s   │
    │      5  │   1.00000e-05s   │   5.29998e-06s   │
    │  10000  │   5.16536e-00s   │   3.63550e-03s   │
    │  25000  │   3.00528e+01s   │   1.17106e-02s   │
    │  25001  │   3.55530e+01s   │   5.20630e-03s   │
    │  50000  │   1.27281e+02s   │   3.61295e-02s   │
    │  50001  │   1.22642e+02s   │   1.20544e-02s   │
    │ 100000  │   5.34743e+02s   │   3.65589e-02s   │
    │ 100001  │   5.21625e+02s   │   2.16841e-02s   │

    The differences in timing is huge! The insertion sort follows about an O(n^2) as predicted and the quick select
    follows about an O(nlog(n)) as well.
    The quick select is by-far the best algorithm for finding the median value with about 22ms for 100K entries.